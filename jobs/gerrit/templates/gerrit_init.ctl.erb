#!/bin/bash
PACKAGE_ROOT_DIR=/var/vcap/packages
PACKAGE_DIR=$PACKAGE_ROOT_DIR/gerrit
GIT_DIR=/var/vcap/packages/git
JAVA_DIR=/var/vcap/packages/java
JOB_DIR=/var/vcap/jobs/gerrit
DATA_DIR=/var/vcap/store/gerrit

VERSION=<%= properties.gerrit.version %>
NEED_UPGRADE=<%= properties.gerrit.upgrade||0 %>

<% if properties.gerrit_postgres %>
dbname=<%= properties.gerrit_postgres.dbname||"reviewdb" %>
<% elsif properties.gerrit_mysql %>
dbname=<%= properties.gerrit_mysql.dbname||"reviewdb" %>
<% end %>

ENABLE_ZABBIX_AGENT=<%= properties.gerrit.enable_zabbix_agent||0 %>
<% if properties.site_specific && properties.site_specific.zabbix_agent_config %>
ZABBIX_AGENT_CONF=<%= properties.site_specific.zabbix_agent_config %>
SITE_SPECIFIC_REPO=<%= properties.site_specific.github_repo %>
<% end %>

CONFIG_DIR=$DATA_DIR/review_site/$dbname/etc/
STATIC_DIR=$DATA_DIR/review_site/$dbname/static
HOOKS_DIR=$DATA_DIR/review_site/$dbname/hooks/
LIB_DIR=$DATA_DIR/review_site/$dbname/lib/

chown vcap:vcap $PACKAGE_DIR/*.war

if [ ! -d $CONFIG_DIR ]; then
  # Tmp directory link to persistent disks
  mkdir -p $DATA_DIR/review_site/$dbname/.gerritcodereview/
  ln -s $DATA_DIR/review_site/$dbname/.gerritcodereview /home/vcap/.gerritcodereview
  chown -R vcap:vcap $DATA_DIR/review_site/$dbname

  # Use expect for DB initilization.
  $JOB_DIR/bin/gerrit_expect $VERSION
  if [ $? != 0 ]; then
    echo "ERROR: Unable to Initialize Gerrit"
    exit 1
  fi

  su - vcap -c "LD_LIBRARY_PATH=$PACKAGE_DIR/lib:$LD_LIBRARY_PATH PATH=$PACKAGE_DIR/bin/:$GIT_DIR/bin/:$JAVA_DIR/bin:$PATH $DATA_DIR/review_site/$dbname/bin/gerrit.sh stop "
fi

if [ $NEED_UPGRADE != 0 ] && [ -d $CONFIG_DIR ]; then
  $JOB_DIR/bin/upgrade_expect $VERSION
  if [ $? != 0 ]; then
    echo "ERROR: Unable to Upgrade Gerrit"
    exit 1
  fi
fi

# Harden Secure Configurations
chown -R vcap:vcap $JOB_DIR/config/
chmod -R 600 $JOB_DIR/config/

# General Configurations
cp -pf $JOB_DIR/config/gerrit.config $CONFIG_DIR/
cp -pf $JOB_DIR/config/secure.config $CONFIG_DIR/
<% if properties.gerrit.http_port && properties.gerrit.http_port < 1024 %>
# set up iptables if the gerrit port is designated as below 1024
is_rule_set=`/sbin/iptables -t nat -L | grep DNAT | grep -c -v "grep"`
if [ $is_rule_set -lt 1 ]; then
  /sbin/iptables -t nat -A PREROUTING -p tcp -d <%= properties.gerrit.external_domain %> --dport <%= properties.gerrit.http_port %> -j DNAT --to <%= properties.gerrit.address %>:8080
  /sbin/iptables -t nat -A OUTPUT -p tcp -d <%= properties.gerrit.external_domain %> --dport <%= properties.gerrit.http_port %> -j DNAT --to <%= properties.gerrit.address %>:8080
fi
<% end %>

# Replication setup
cp -pf $JOB_DIR/config/replication.config $CONFIG_DIR/

# Gerrit Hooks setup
rm -rf $HOOKS_DIR
cp -r $PACKAGE_DIR/gerrit_hooks $HOOKS_DIR
mkdir -p $HOOKS_DIR/patchset_notification/config
cp -pf $JOB_DIR/config/gerrit_hooks.yml $HOOKS_DIR/patchset_notification/config/
cp -pf $JOB_DIR/config/notification_config.yml $HOOKS_DIR/patchset_notification/config/
<% if properties.gerrit.pair_mode %>
cp -pf $JOB_DIR/bin/ref-updated $HOOKS_DIR
<% end %>
chown -R vcap:vcap $HOOKS_DIR


# SSH keyfile for reviewbot(which setup reviewers automatically)
chown vcap:vcap $PACKAGE_DIR/review*
chmod 600 $PACKAGE_DIR/review*
cp -pf $PACKAGE_DIR/review* $HOOKS_DIR/patchset_notification/config/

# cla_signed hook, will send mail once anyone signed CLA
cp -pf $JOB_DIR/bin/cla-signed $HOOKS_DIR/
cp -pf $JOB_DIR/config/cla_notice_config.yml $HOOKS_DIR/

# cp contact_information.pub key, which is used to encrypt contact information
cp -pf $JOB_DIR/config/contact_information.pub $CONFIG_DIR
cp -pf $PACKAGE_DIR/bcpg-jdk16-146.jar $LIB_DIR/
chown vcap:vcap $LIB_DIR/bcpg-jdk16-146.jar
touch /var/vcap/sys/log/gerrit/cla_notice.log
chown vcap:vcap  $PACKAGE_ROOT_DIR/cla_notice/cla_notice.rb /var/vcap/sys/log/gerrit/cla_notice.log
chmod 600 $PACKAGE_ROOT_DIR/cla_notice/cla_notice.rb /var/vcap/sys/log/gerrit/cla_notice.log

# set up gitweb files
if [ ! -d /usr/lib/cgi-bin ]; then
  mkdir /usr/lib/cgi-bin
fi
cp -vf $PACKAGE_DIR/gitweb/gitweb.cgi /usr/lib/cgi-bin/gitweb.cgi
cp -vrf $PACKAGE_DIR/gitweb/static /usr/share/gitweb

rm -rf $STATIC_DIR/*

# Copy any CLA files
cp $JOB_DIR/config/clas/* $STATIC_DIR
chown -R vcap:vcap $STATIC_DIR

# Update the DB with the CLA agreements
<% if (properties.gerrit.version =~ /^2\.2\./) %>
(
  set -o errexit
  export PATH=$PACKAGE_ROOT_DIR/ruby/bin:$PATH
  export LD_LIBRARY_PATH=/var/vcap/packages/mysqlclient/lib/mysql:$LD_LIBRARY_PATH
  cd $PACKAGE_ROOT_DIR/gerrit_cla_updater
  bundle exec ruby gerrit_cla_updater.rb $JOB_DIR/config/cla_config.yml
)
<% end %>

# Passwdless ssh key pair refresh/generation (for replication)
if [ ! -f /home/vcap/.ssh/id_rsa.pub ]; then
  rm -rf /home/vcap/.ssh/*
  $JOB_DIR/bin/ssh_expect
fi

# SSH config so that Gerrit knows how to authenticate
cp /var/vcap/jobs/gerrit/config/ssh_config /home/vcap/.ssh/config
chown vcap:vcap /home/vcap/.ssh/config
chmod 0644 /home/vcap/.ssh/config

# Refresh host key for github
su - vcap -c 'ssh-keygen -f /home/vcap/.ssh/known_hosts -R github.com'
su - vcap -c 'ssh-keyscan github.com >> /home/vcap/.ssh/known_hosts'

# Auto close pull requests
rm -f /etc/cron.hourly/close_pull_requests
<% if properties.gerrit.pr_bounce %>
cp /var/vcap/jobs/gerrit/bin/close_pull_requests /etc/cron.hourly
chmod +x /etc/cron.hourly/close_pull_requests
<% end %>

# Send out email digests of esers registered in the last hour
rm -f /etc/cron.hourly/email_new_users
<% if properties.gerrit.new_user_notifier %>
cp /var/vcap/jobs/gerrit/bin/email_new_users /etc/cron.hourly
chmod +x /etc/cron.hourly/email_new_users
<% end %>

# Update the CI batch account
(
  set -o errexit
  export PATH=$PACKAGE_ROOT_DIR/ruby/bin:$PATH
  export LD_LIBRARY_PATH=/var/vcap/packages/mysqlclient/lib/mysql:$LD_LIBRARY_PATH
  cd $PACKAGE_ROOT_DIR/create_batch_gerrit_account
  bundle exec ruby create_batch_gerrit_account.rb $JOB_DIR/config/mysql.yml $JOB_DIR/config/jenkins_user.yml
<% if properties.gerrit.pair_mode %>
  bundle exec ruby create_batch_gerrit_account.rb $JOB_DIR/config/mysql.yml $JOB_DIR/config/pair_mode_bot.yml
<% end %>
)

# Update the gerrit-trigger batch account
(
  set -o errexit
  export PATH=$PACKAGE_ROOT_DIR/ruby/bin:$PATH
  export LD_LIBRARY_PATH=/var/vcap/packages/mysqlclient/lib/mysql:$LD_LIBRARY_PATH
  cd $PACKAGE_ROOT_DIR/create_batch_gerrit_account
  bundle exec ruby create_batch_gerrit_account.rb $JOB_DIR/config/mysql.yml $JOB_DIR/config/gerrit_trigger.yml
)

# Update the review bot batch account
(
  set -o errexit
  export PATH=$PACKAGE_ROOT_DIR/ruby/bin:$PATH
  export LD_LIBRARY_PATH=/var/vcap/packages/mysqlclient/lib/mysql:$LD_LIBRARY_PATH

  # set the pub key for the reviewbot
  pub_key=`cat $PACKAGE_DIR/review.pub`
  sed -i '/.*public_key:.*/d' $JOB_DIR/config/reviewbot_user.yml
  echo -n "public_key: \"$pub_key\"" >> $JOB_DIR/config/reviewbot_user.yml

  cd $PACKAGE_ROOT_DIR/create_batch_gerrit_account
  bundle exec ruby create_batch_gerrit_account.rb $JOB_DIR/config/mysql.yml $JOB_DIR/config/reviewbot_user.yml
)

# Configure site header
cp $JOB_DIR/config/site_header.html $CONFIG_DIR/GerritSiteHeader.html
chown vcap:vcap $CONFIG_DIR/GerritSiteHeader.html

# Footer
cp $JOB_DIR/config/site_footer.html $CONFIG_DIR/GerritSiteFooter.html
chown vcap:vcap $CONFIG_DIR/GerritSiteFooter.html


# Be sure to increment logo_version if the logo changes. It will invalidate
# browser caches, forcing the new logo to be fetched.
cp $JOB_DIR/config/logo.png $STATIC_DIR/logo.<%= properties.gerrit.logo_version %>.cache.png
chown vcap:vcap $STATIC_DIR/logo.<%= properties.gerrit.logo_version %>.cache.png

# install zabbix agent
if [ $ENABLE_ZABBIX_AGENT = 1 ]; then
  dpkg -iE $PACKAGE_ROOT_DIR/zabbix_agent/bds-zabbix_0.1-39_all.deb
  if [ -n "$ZABBIX_AGENT_CONF" ]; then
    rm -rf /tmp/site_repo
    su vcap -c "/var/vcap/packages/git/bin/git clone $SITE_SPECIFIC_REPO /tmp/site_repo"
    cp -f /tmp/site_repo/$ZABBIX_AGENT_CONF /etc/zabbix/zabbix_agentd.conf
    /etc/init.d/zabbix-agent restart
  fi
else
  zabbix_running=`ps -ef | grep zabbix | grep -c -v "grep"`
  if [ $zabbix_running -gt 0 ]; then
    killall zabbix_agentd
  fi
  zabbix_installed=`dpkg -l | grep -c bds-zabbix`
  if [ $zabbix_installed -gt 0 ]; then
    dpkg -P bds-zabbix
  fi
fi

# set up replication plugin if version is 2.5.1
if [ "$VERSION" = '2.5.1' ]; then
  mkdir -p $DATA_DIR/review_site/$dbname/plugins/
  cp -f $PACKAGE_DIR/replication-1.0.jar $DATA_DIR/review_site/$dbname/plugins/
fi
