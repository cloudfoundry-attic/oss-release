#!/bin/bash
PACKAGE_ROOT_DIR=/var/vcap/packages
PACKAGE_DIR=$PACKAGE_ROOT_DIR/gerrit
GIT_DIR=/var/vcap/packages/git
JAVA_DIR=/var/vcap/packages/java
JOB_DIR=/var/vcap/jobs/gerrit
DATA_DIR=/var/vcap/store/gerrit

VERSION=<%= properties.gerrit.version %>
NEED_UPGRADE=<%= properties.gerrit.upgrade||0 %>

<% if properties.gerrit_postgres %>
dbname=<%= properties.gerrit_postgres.dbname||"reviewdb" %>
<% elsif properties.gerrit_mysql %>
dbname=<%= properties.gerrit_mysql.dbname||"reviewdb" %>
<% end %>

CONFIG_DIR=$DATA_DIR/review_site/$dbname/etc/
STATIC_DIR=$DATA_DIR/review_site/$dbname/static

chown vcap:vcap $PACKAGE_DIR/*.war

if [ ! -d $CONFIG_DIR ]; then
  mkdir -p $DATA_DIR/review_site/$dbname
  chown vcap:vcap $DATA_DIR/review_site/$dbname

  # Use expect for DB initilization.
  $JOB_DIR/bin/gerrit_expect $VERSION
  if [ $? != 0 ]; then
    echo "ERROR: Unable to Initialize Gerrit"
    exit 1
  fi

  su - vcap -c "LD_LIBRARY_PATH=$PACKAGE_DIR/lib:$LD_LIBRARY_PATH PATH=$PACKAGE_DIR/bin/:$GIT_DIR/bin/:$JAVA_DIR/bin:$PATH $DATA_DIR/review_site/$dbname/bin/gerrit.sh stop "
fi

if [ $NEED_UPGRADE != 0 ] && [ -d $CONFIG_DIR ]; then
  $JOB_DIR/bin/upgrade_expect $VERSION
  if [ $? != 0 ]; then
    echo "ERROR: Unable to Upgrade Gerrit"
    exit 1
  fi
fi

# Harden Secure Configurations
chown -R vcap:vcap $JOB_DIR/config/
chmod -R 600 $JOB_DIR/config/

# General Configurations
cp -pf $JOB_DIR/config/gerrit.config $CONFIG_DIR/
cp -pf $JOB_DIR/config/secure.config $CONFIG_DIR/

# Replication setup
cp -pf $JOB_DIR/config/replication.config $CONFIG_DIR/

# Gerrit Hooks setup
rm -rf $CONFIG_DIR/../hooks
cp -r $PACKAGE_DIR/hooks $CONFIG_DIR/../
cp -pf $JOB_DIR/config/gerrit_hooks.yml $CONFIG_DIR/../hooks/patchset_notification/config/
cp -pf $JOB_DIR/config/review* $CONFIG_DIR/../hooks/patchset_notification/config/
chown -R vcap:vcap $CONFIG_DIR/../hooks/

rm -rf $STATIC_DIR/*

# Copy any CLA files
cp $JOB_DIR/config/clas/* $STATIC_DIR
chown -R vcap:vcap $STATIC_DIR

# Update the DB with the CLA agreements
<% if (properties.gerrit.version =~ /^2\.2\./) %>
(
  set -o errexit
  set -o nounset
  export PATH=$PACKAGE_ROOT_DIR/ruby/bin:$PATH
  cd $PACKAGE_ROOT_DIR/gerrit_cla_updater
  bundle exec ruby gerrit_cla_updater.rb $JOB_DIR/config/cla_config.yml
)
<% end %>

# Passwdless ssh key pair refresh/generation (for replication)
if [ ! -f /home/vcap/.ssh/id_rsa.pub ]; then
  rm -rf /home/vcap/.ssh/*
  $JOB_DIR/bin/ssh_expect
fi

# SSH config so that Gerrit knows how to authenticate
cp /var/vcap/jobs/gerrit/config/ssh_config /home/vcap/.ssh/config
chown vcap:vcap /home/vcap/.ssh/config
chmod 0644 /home/vcap/.ssh/config

# Refresh host key for github
su - vcap -c "ssh-keygen -R github.com && ssh github.com"

# Auto close pull requests
rm -f /etc/cron.hourly/close_pull_requests
<% if properties.gerrit.pr_bounce %>
cp /var/vcap/jobs/gerrit/bin/close_pull_requests /etc/cron.hourly
chmod +x /etc/cron.hourly/close_pull_requests
<% end %>
